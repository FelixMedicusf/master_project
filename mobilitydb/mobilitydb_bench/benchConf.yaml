benchmark:
  sut: "MobilityDB"
  nodes:
    - "34.140.115.183"
    - "34.77.231.115"
    - "34.76.36.161"
  threads: 4
  random_seed: 123

queryConfigs:
  # Temporal queries (5 functioning, 3 chosen)

  # use
  - name: countActiveFlightsInPeriod
    use: True
    type: temporal
    sql: >
      SELECT COUNT(*), :period
      FROM flights f
      WHERE f.trip && :period;
    repetition: 10
    parameter_sets:
      - parameters:
          period: tstzspan'[2023-07-28 15:16:33, 2023-08-11 14:00:31]'
      - parameters:
          period: tstzspan'[2023-04-12 07:21:03, 2023-04-17 17:52:48]'
      - parameters:
          period: tstzspan'[2023-11-10 23:09:32, 2023-11-15 21:45:31]'
      - parameters:
          period: tstzspan'[2023-10-19 06:48:37, 2023-11-07 18:55:52]'
      - parameters:
          period: tstzspan'[2023-10-05 08:56:35, 2023-10-10 11:26:36]'
  # use
  - name: locationOfAirplaneAtInstant
    use: True
    type: temporal
    sql: >
      SELECT f.flightid, valueAtTimeStamp(f.altitude, :instant), ST_asText(valueAtTimeStamp(f.trip, :instant)) AS location, :instant
      FROM flights f
      WHERE attime(f.trip, :instant) IS NOT NULL;
    repetition: 10
    parameter_sets:
      - parameters:
          instant: timestamptz'2023-03-12 09:09:31'
      - parameters:
          instant: timestamptz'2023-04-21 04:43:41'
      - parameters:
          instant: timestamptz'2023-07-14 22:23:21'
      - parameters:
          instant: timestamptz'2023-01-09 09:02:35'
      - parameters:
          instant: timestamptz'2023-06-05 15:52:50'

  - name: averageHourlyFlightsDuringDay
    use: False
    type: temporal
    sql: >
      WITH hourly_intervals AS (
      SELECT generate_series(DATE :day::timestamp, (DATE :day + INTERVAL '1 day' - INTERVAL '1 second')::timestamp,
      INTERVAL '1 hour'
      ) AS start_time)
      SELECT h.start_time, COUNT(f.flightid) AS active_flights
      FROM hourly_intervals h LEFT JOIN flights f
      ON
      f.trip && span(h.start_time, h.start_time + INTERVAL '1 hour')
      GROUP BY h.start_time
      ORDER BY h.start_time;
    repetition: 10
    parameter_sets:
      - parameters:
          day: "'2023-11-05'"
      - parameters:
          day: "'2023-09-30'"
      - parameters:
          day: "'2023-08-01'"
      - parameters:
          day: "'2023-04-19'"
      - parameters:
          day: "'2023-12-20'"

  - name: flightsWithLocalOriginDestinationInPeriod
    use: False
    type: temporal no aggregate query
    sql: >
      SELECT
          f.flightid,
          f.origin AS origin_airport,
          CASE WHEN c1.name IS NOT NULL THEN c1.name ELSE 'abroad' END AS origin_city,
          f.destination AS destination_airport,
          CASE WHEN c2.name IS NOT NULL THEN c2.name ELSE 'abroad' END AS destination_city
      FROM flights f
              LEFT JOIN airports a1 ON f.origin = a1.icao
              LEFT JOIN cities c1 ON a1.city = c1.name
              LEFT JOIN airports a2 ON f.destination = a2.icao
              LEFT JOIN cities c2 ON a2.city = c2.name
      WHERE
          (f.origin IN (
              SELECT a.icao
              FROM airports a
                       JOIN cities c ON a.city = c.name) OR
           f.destination IN (
               SELECT a.icao
               FROM airports a JOIN cities c ON a.city = c.name))
      AND f.trip && :period_short;
    repetition: 10
    parameter_sets:
      - parameters:
          period_short: tstzspan'[2023-12-15 10:41:32, 2023-12-16 18:59:39]'
      - parameters:
          period_short: tstzspan'[2023-08-10 08:22:09, 2023-08-10 14:35:38]'
      - parameters:
          period_short: tstzspan'[2023-04-14 19:14:25, 2023-04-16 19:06:08]'
      - parameters:
          period_short: tstzspan'[2023-08-01 17:48:45, 2023-08-02 19:29:29]'
      - parameters:
          period_short: tstzspan'[2023-12-24 23:31:34, 2023-12-26 08:24:43]'
  # use
  - name: airportUtilizationInPeriod
    use: True
    type: temporal
    sql: >
      WITH departures AS (
      SELECT f.origin AS airport, COUNT(DISTINCT f.flightid) AS departure_count
      FROM flights f
      WHERE f.trip && :period_medium
      GROUP BY f.origin),
      arrivals AS (
      SELECT f.destination AS airport, COUNT(DISTINCT f.flightid) AS arrival_count
      FROM flights f
      WHERE f.trip && :period_medium
      GROUP BY f.destination)
      SELECT
      COALESCE(d.airport, a.airport) AS airport,
      COALESCE(d.departure_count, 0) AS departures,
      COALESCE(a.arrival_count, 0) AS arrivals,
      COALESCE(d.departure_count, 0) + COALESCE(a.arrival_count, 0) AS traffic_count
      FROM departures d FULL JOIN arrivals a ON d.airport = a.airport
      ORDER BY traffic_count DESC, departures DESC, arrivals DESC;
    repetition: 10
    parameter_sets:
      - parameters:
          period_medium: tstzspan'[2023-11-18 16:11:21, 2023-12-02 11:47:42]'
      - parameters:
          period_medium: tstzspan'[2023-03-19 19:27:56, 2023-03-29 17:04:06]'
      - parameters:
          period_medium: tstzspan'[2023-08-27 23:40:31, 2023-08-30 11:46:54]'
      - parameters:
          period_medium: tstzspan'[2023-08-24 21:39:27, 2023-09-04 09:51:41]'
      - parameters:
          period_medium: tstzspan'[2023-02-17 22:18:10, 2023-02-27 21:50:27]'

  # Spatial queries (5 functioning, 3 chosen)

  - name: flightsInCityRadius
    use: False
    type: spatial
    sql: >
      SELECT f.flightid, f.track, f.origin, f.destination, f.airplanetype
      FROM flights f, cities c
      WHERE c.name = :city AND eDwithin(f.trip, c.geom, :radius);
    repetition: 10
    parameter_sets:
      - parameters:
          city: "'Guetersloh'"
          radius: 50
      - parameters:
          city: "'Cologne'"
          radius: 100
      - parameters:
          city: "'Dortmund'"
          radius: 75
      - parameters:
          city: "'Buende'"
          radius: 30
      - parameters:
          city: "'Moers'"
          radius: 150

  - name: flightsIntersectingMunicipalities
    use: False
    type: spatial
    sql: >
      SELECT g.name, f.flightid, f.airplanetype, f.origin, f.destination
      FROM flights f, municipalities g
      WHERE st_intersects(f.traj, g.geom) AND g.name = :municipality;
    repetition: 10
    parameter_sets:
      - parameters:
          municipality: "'Gem Horn-Bad Meinberg'"
      - parameters:
          municipality: "'Gem Huertgenwald'"
      - parameters:
          municipality: "'Gem Warburg'"
      - parameters:
          municipality: "'Gem Balve'"
      - parameters:
          municipality: "'Gem Kranenburg'"
  # use
  - name: countFlightsInCounties
    use: True
    type: spatial
    sql: >
      SELECT k.name, COUNT(*) as flight_count
      FROM counties k
      JOIN flights f
      ON f.traj && k.geom
      WHERE k.name = :county AND st_intersects(f.traj, k.geom)
      GROUP BY k.name;
    repetition: 10
    parameter_sets:
      - parameters:
          county: "'Krs Rhein-Sieg-Kreis'"
      - parameters:
          county: "'Krs Remscheid'"
      - parameters:
          county: "'Krs Oberbergischer Kreis'"
      - parameters:
          county: "'Krs Duesseldorf'"
      - parameters:
          county: "'Krs Moenchengladbach'"
  # use
  - name: flightsCloseToMainCitiesLowAltitude
    use: True
    type: spatial
    sql: >
      SELECT p.flightid, p.altitude, p.airplanetype, p.timestamp
      FROM flightpoints p
      JOIN cities c
      ON ST_DWithin(p.geom, c.geom, :radius)  
      WHERE p.altitude <= :low_altitude
      AND c.population >= 200000;
    repetition: 10
    parameter_sets:
      - parameters:
          low_altitude: 1050
          radius: 30
      - parameters:
          low_altitude: 1200
          radius: 60
      - parameters:
          low_altitude: 580
          radius: 70
      - parameters:
          low_altitude: 950
          radius: 65
      - parameters:
          low_altitude: 750
          radius: 100
  # use
  - name: flightClosestToPoint
    use: True
    type: spatial
    sql: >
      SELECT f.flightid, f.airplaneType, f.origin, f.destination,
      ST_Distance(f.traj, ST_GeogFromText('SRID=4326;:point')) AS min_distance
      FROM flights f
      WHERE ST_DWithin(f.traj, ST_GeogFromText('SRID=4326;:point'), 115)  
      ORDER BY min_distance ASC;
    repetition: 10 # change to geogFromText (check what unit it is in (in Mongo seems to be meters))
    parameter_sets:
      - parameters:
          point: POINT(7.365475485030469 51.44282685124891)
          distance: 150
      - parameters:
          point: POINT(6.508335475259438 51.61901590207067)
          distance: 220
      - parameters:
          point: POINT(7.038107227408294 51.256311458722024)
          distance: 115
      - parameters:
          point: POINT(7.9319714196871915 51.261173877480914)
          distance: 240
      - parameters:
          point: POINT(7.951155121394054 50.724243209930954)
          distance: 350


  # spatiotemporal queries (6 (7) functioning, 6 chosen)
  # use
  - name: flightsInCountyInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT f.flightid, f.track
      FROM flights f, counties k
      WHERE k.name = :county AND f.trip && stbox(k.geom, :period_medium) AND eintersects(attime(f.trip, :period_medium), k.geom);
    repetition: 10
    parameter_sets:
      - parameters:
          period_medium: tstzspan'[2023-05-18 14:44:44, 2023-05-20 06:12:05]'
          county: "'Krs Gelsenkirchen'"
      - parameters:
          period_medium: tstzspan'[2023-08-04 06:56:35, 2023-08-07 15:43:21]'
          county: "'Krs Olpe'"
      - parameters:
          period_medium: tstzspan'[2023-04-17 02:35:04, 2023-04-17 18:09:02]'
          county: "'Krs Muelheim a.d. Ruhr'"
      - parameters:
          period_medium: tstzspan'[2023-06-03 08:05:09, 2023-06-08 22:24:03]'
          county: "'Krs Herford'"
      - parameters:
          period_medium: tstzspan'[2023-01-20 19:30:00, 2023-01-20 20:00:00]'
          county: "'Krs Herne'"

  # join query
  - name: pairOfFlightsInMunicipalityDuringPeriod
    use: False
    type: spatiotemporal
    sql: >
      SELECT DISTINCT f1.flightId AS f1_flightid, f2.flightid AS f2_flightid, :period, g.name
      FROM flights f1, flights f2, municipality g
      WHERE f1.flightid < f2.flightid AND g.name = :municipality AND f1.trip && stbox(g.geom, :period) AND
      f2.trip && stbox(g.geom, :period) AND
      eintersects(attime(f1.trip, :period), g.geom) AND
      eintersects(attime(f2.trip, :period), g.geom);
    repetition: 1000
    parameter_sets:
      - parameters:
          period_short: tstzspan'[2023-09-10 19:51:12, 2023-09-11 19:55:56]'
          municipality: "'Gem Augustdorf'"
      - parameters:
          period_short: tstzspan'[2023-08-15 17:52:01, 2023-08-16 08:58:06]'
          municipality: "'Gem Sonsbeck'"
      - parameters:
          period_short: tstzspan'[2023-05-13 01:26:19, 2023-05-14 13:11:58]'
          municipality: "'Gem Dahlem'"
      - parameters:
          period_short: tstzspan'[2023-06-28 05:50:01, 2023-06-28 17:44:05]'
          municipality: "'Gem Meerbusch'"
      - parameters:
          period_short: tstzspan'[2023-10-09 03:32:04, 2023-10-09 19:47:49]'
          municipality: "'Gem Langenberg'"
  #use
  - name: countFlightsAtInstantInDistricts
    use: True
    type: spatiotemporal
    sql: >
      SELECT b.name, COUNT (*)
      FROM flights f, districts b
      WHERE f.trip && stbox(b.geom, :instant) AND eintersects(attime(f.trip, :instant), b.geom)
      GROUP BY b.name;
    repetition: 10
    parameter_sets:
      - parameters:
          instant: timestamptz'2023-12-05 00:36:35'
      - parameters:
          instant: timestamptz'2023-07-07 00:00:44'
      - parameters:
          instant: timestamptz'2023-02-28 19:13:46'
      - parameters:
          instant: timestamptz'2023-09-06 08:18:07'
      - parameters:
          instant: timestamptz'2023-05-07 22:00:58'

  # use
  - name: inCityRadiusInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT f.flightId, f.track, f.airplanetype, f.origin, f.destination
      FROM cities AS c
      JOIN flights AS f
      ON eDwithin(attime(f.trip, :period_short), c.geom, :radius)
      WHERE c.name = :city AND f.trip && :period_short;
    repetition: 10
    parameter_sets:
      - parameters:
          period_short: tstzspan'[2023-06-27 02:50:19, 2023-06-28 02:08:00]'
          city: "'Gladbeck'"
          radius: 1500
      - parameters:
          period_short: tstzspan'[2023-07-24 00:00:00, 2023-07-25 00:00:00]'
          city: "'Vlotho'"
          radius: 1250
      - parameters:
          period_short: tstzspan'[2023-12-24 10:00:00, 2023-12-24 23:59:59]'
          city: "'Ennepetal'"
          radius: 2500
      - parameters:
          period_short: tstzspan'[2023-01-01 00:00:00, 2023-01-01 08:00:00]'
          city: "'Bad Salzuflen'"
          radius: 2000
      - parameters:
          period_short: tstzspan'[2023-03-02 05:56:59, 2023-03-03 19:42:20]'
          city: "'Werl'"
          radius: 1000

  # use
  - name: flightDurationInMunicipalityLowAltitudeInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT g.name, f.flightid, f.origin, f.destination, f.airplanetype,
      duration(whenTrue(attime(f.altitude, :period_medium) #< :low_altitude
      & tintersects(attime(tgeompoint(f.trip), :period_medium), geometry(g.geom))))
      AS totalTimeBelowAltitude
      FROM municipalities g
      JOIN flights f
      ON f.trip && stbox(g.geom, :period_medium)
      WHERE g.name = :municipality AND duration(whenTrue(attime(f.altitude, :period_medium) #< :low_altitude
      & tintersects(attime(tgeompoint(f.trip), :period_medium), geometry(g.geom)))) IS NOT NULL;
    repetition: 10
    parameter_sets:
      - parameters:
          period_medium: tstzspan'[2023-04-09 19:54:27, 2023-04-13 18:50:24]'
          municipality: "'Gem Erwitte'"
          low_altitude: 1360
      - parameters:
          period_medium: tstzspan'[2023-10-06 11:18:05, 2023-10-20 00:27:58]'
          municipality: "'Gem Rheine'"
          low_altitude: 1500
      - parameters:
          period_medium: tstzspan'[2023-10-06 16:02:04, 2023-10-15 09:05:36]'
          municipality: "'Gem Lippetal'"
          low_altitude: 1850
      - parameters:
          period_medium: tstzspan'[2023-05-28 19:09:14, 2023-06-01 13:00:38]'
          municipality: "'Gem Kirchlengern'"
          low_altitude: 1750
      - parameters:
          period_medium: tstzspan'[2023-11-11 10:46:18, 2023-11-11 18:59:34]'
          municipality: "'Gem Ascheberg'"
          low_altitude: 1540
# use
  - name: averageHourlyFlightsDuringDayInMunicipality
    use: True
    type: spatiotemporal
    sql: >
      WITH hourly_flights AS (
      SELECT generate_series(
      DATE :day::timestamp,
      DATE :day + INTERVAL '1 day' - INTERVAL '1 second',
      INTERVAL '1 hour'
      ) AS start_time
      ),
      filtered_flights AS (
      SELECT f.flightid, g.name AS municipality_name, g.geom as polygon,
      attime(f.trip, span(:day::timestamp, :day::timestamp + INTERVAL '1 day')) AS daily_trip
      FROM flights f
      JOIN municipalities g ON f.trip && stbox(g.geom, span(:day::timestamp, :day::timestamp + INTERVAL '1 day'))
      WHERE g.name = :municipality
      )
      SELECT h.start_time, COUNT(f.flightid) AS active_flights
      FROM hourly_flights h
      LEFT JOIN filtered_flights f
      ON eintersects(attime(f.daily_trip, span(h.start_time, h.start_time + INTERVAL '1 hour' - INTERVAL '1 second')), polygon)
      WHERE f.municipality_name = :municipality
      GROUP BY h.start_time
      ORDER BY h.start_time;
    repetition: 10
    parameter_sets:
      - parameters:
          day: "'2023-11-27'"
          municipality: "'Gem Brilon'"
      - parameters:
          day: "'2023-07-27'"
          municipality: "'Gem Hennef (Sieg)'"
      - parameters:
          day: "'2023-05-31'"
          municipality: "'Gem Aachen'"
      - parameters:
          day: "'2023-05-04'"
          municipality: "'Gem Marsberg'"
      - parameters:
          day: "'2023-02-17'"
          municipality: "'Gem Geilenkirchen'"
  # use
  - name: flightsWithLocalOriginDestinationInPeriodInCounty
    use: True
    type: spatiotemporal
    sql: >
      WITH relevant_airports AS (
      SELECT a.icao as icao
      FROM airports a
      JOIN cities c ON a.city = c.name
      ),
      airport_city_mapping AS (
      SELECT a.icao, COALESCE(c.name, 'abroad') AS city_name
      FROM airports a
      LEFT JOIN cities c ON a.city = c.name
      )
      SELECT f.flightid, f.origin AS origin_airport, acm1.city_name AS origin_city, f.destination AS destination_airport,
      acm2.city_name AS destination_city
      FROM flights f
      JOIN counties k ON k.name = :county
      LEFT JOIN airport_city_mapping acm1 ON f.origin = acm1.icao
      LEFT JOIN airport_city_mapping acm2 ON f.destination = acm2.icao
      WHERE
      (f.origin IN (SELECT icao FROM relevant_airports) OR f.destination IN (SELECT icao FROM relevant_airports))
      AND f.trip && stbox(k.geom, :period_medium)
      AND eintersects(attime(f.trip, :period_medium), k.geom)
      ORDER BY origin_airport, destination_airport, f.flightid;
    repetition: 10
    parameter_sets:
      - parameters:
          period_medium: tstzspan'[2023-01-21 20:30:23, 2023-01-22 08:09:51]'
          county: "'Krs Rhein-Sieg-Kreis'"
      - parameters:
          period_medium: tstzspan'[2023-06-08 13:09:05, 2023-06-08 19:28:17]'
          county: "'Krs Duesseldorf'"
      - parameters:
          period_medium: tstzspan'[2023-01-07 05:20:52, 2023-01-08 07:34:28]'
          county: "'Krs Herford'"
      - parameters:
          period_medium: tstzspan'[2023-03-15 06:56:37, 2023-03-16 10:46:57]'
          county: "'Krs Duisburg'"
      - parameters:
          period_medium: tstzspan'[2023-05-13 01:45:21, 2023-05-14 12:54:31]'
          county: "'Krs Hamm'"

