benchmark:
  sut: "MobilityDB"
  nodes:
    - "34.140.119.43"
    - "34.38.2.68"
    - "34.79.131.15"
  threads: 2
  random_seed: 123

queryConfigs:

  # Temporal queries
  - name: countActiveFlightsInPeriod
    use: True
    type: temporal
    sql: >
      SELECT COUNT(*), :period
      FROM flights f
      WHERE f.trip && :period
    repetition: 1000
    parameters:
      - period

  - name: locationOfAirplaneAtInstant
    use: True
    type: temporal
    sql: >
      SELECT f.flightid, valueAtTimeStamp(f.altitude, :instant), ST_asText(valueAtTimeStamp(f.trip, :instant)) AS location
      FROM flights f
      WHERE f.trip && :period;
    repetition: 1000
    parameters:
      - instant

  - name: averageHourlyFlightsDuringDay
    use: True
    type: temporal
    sql: >
      WITH hourly_intervals AS (
      SELECT generate_series(DATE :day::timestamp, (DATE :day + INTERVAL '1 day' - INTERVAL '1 second')::timestamp,
      INTERVAL '1 hour'
      ) AS start_time)
      SELECT h.start_time, COUNT(f.flightid) AS active_flights 
      FROM hourly_intervals h LEFT JOIN flights f
      ON
      f.trip && span(h.start_time, h.start_time + INTERVAL '1 hour') 
      GROUP BY h.start_time
      ORDER BY h.start_time;
    repetition: 2
    parameters:
      - day

  - name: flightsWithLocalOriginDestinationInPeriod
    use: True
    type: temporal no aggregate query
    sql: >
      SELECT
          f.flightid,
          f.origin AS origin_airport,
          CASE WHEN c1.name IS NOT NULL THEN c1.name ELSE 'abroad' END AS origin_city,
          f.destination AS destination_airport,
          CASE WHEN c2.name IS NOT NULL THEN c2.name ELSE 'abroad' END AS destination_city
      FROM flights f
              LEFT JOIN airports a1 ON f.origin = a1.icao
              LEFT JOIN cities c1 ON a1.city = c1.name
              LEFT JOIN airports a2 ON f.destination = a2.icao
              LEFT JOIN cities c2 ON a2.city = c2.name
      WHERE
          (f.origin IN (
              SELECT a.icao
              FROM airports a
                       JOIN cities c ON a.city = c.name) OR
           f.destination IN (
               SELECT a.icao
               FROM airports a JOIN cities c ON a.city = c.name))
      AND f.trip && :period
      ORDER BY origin_airport, destination_airport, f.flightid;
    repetition: 2
    parameters:
      - period_short

  - name: airportUtilizationInPeriod
    use: True
    type: temporal
    sql: >
      WITH departures AS (
      SELECT f.origin AS airport, COUNT(f.flightid) AS departure_count
      FROM flights f
      WHERE f.trip && :period
      GROUP BY f.origin),
      arrivals AS (
      SELECT f.destination AS airport, COUNT(f.flightid) AS arrival_count
      FROM flights f
      WHERE f.trip && :period
      GROUP BY f.destination)
      SELECT
      COALESCE(d.airport, a.airport) AS airport,
      COALESCE(d.departure_count, 0) AS departures,
      COALESCE(a.arrival_count, 0) AS arrivals,
      COALESCE(d.departure_count, 0) + COALESCE(a.arrival_count, 0) AS traffic_count
      FROM departures d FULL JOIN arrivals a ON d.airport = a.airport
      ORDER BY traffic_count DESC, departures DESC, arrivals DESC;
    repetition: 2
    parameters:
      - period_medium

  # Spatial queries
  - name: flightsInCityRadius
    use: True
    type: spatial
    sql: >
      SELECT f.flightid, f.originAirport, f.destinationAirport, f.airplaneType
      FROM flights f, cities c
      WHERE c.name = :city AND ST_DWithin(f.trip, c.geom, :radius);
    repetition: 2
    parameters:
      - city
      - radius

  - name: flightsIntersectingMunicipalities
    use: True
    type: spatial
    sql: >
      SELECT g.name, f.flightId, f.airplanetype, f.originAiport, f.destinationAirport
      FROM flights f, municipalities g
      WHERE eintersects(f.trip, g.geom) AND g.name = :municipality;
    repetition: 1000
    parameters:
      - municipality

  - name: countFlightsInCounties
    use: True
    type: spatial
    sql: >
      SELECT k.name, COUNT (*) as flight_count
      FROM flights f, counties k
      WHERE eintersects(f.traj, k.geom) AND k.name = :county
      GROUP BY k.name;
    repetition: 1000
    parameters:
      - county

  - name: flightsCloseToMainCitiesLowAltitude
    use: True
    type: spatial
    sql: >
      SELECT p.flightid, p.altitude, p.airplanetype, p.timestamp
      FROM flightpoints p, cities c
      WHERE p.altitude <= :low_altitude AND ST_DWithin(p.geom, c.geom, :radius) AND c.population >= 200000
    repetition: 2
    parameters:
      - low_altitude
      - radius

  - name: countiesLandingsDepartures
    use: True
    type: spatial
    sql: >
      WITH flight_origins AS (
      SELECT f.flightid, a.city AS origin_city, c.geom AS origin_geom
      FROM flights f JOIN airports a ON f.origin = a.icao JOIN cities c ON a.city = c.name
      ),
      flight_destinations AS (
      SELECT f.flightid, a.city AS destination_city, c.geom AS destination_geom
      FROM flights f JOIN airports a ON f.destination = a.icao JOIN cities c ON a.city = c.name
      ),
      region_origins AS (
      SELECT r.name AS region_name, COUNT(fo.flightid) AS origin_count
      FROM flight_origins fo JOIN counties r ON ST_Within(fo.origin_geom, r.geom)
      WHERE r.name = :county
      GROUP BY r.name
      ),
      region_destinations AS (
      SELECT r.name AS region_name, COUNT(fd.flightid) AS destination_count
      FROM flight_destinations fd JOIN counties r ON ST_Within(fd.destination_geom, r.geom)
      WHERE r.name = :county
      GROUP BY r.name
      )
      SELECT ro.region_name, ro.origin_count AS origin_count, rd.destination_count AS departures,
      ro.origin_count + rd.destination_count AS overall_traffic
      FROM region_origins ro FULL OUTER JOIN region_destinations rd ON ro.region_name = rd.region_name
      ORDER BY overall_traffic DESC;
    repetition: 2
    parameters:
      - county

  - name: flightClosestToPoint
    use: True
    type: spatial
    sql: > 
      SELECT f.airplaneType, f.originAirport, f.destinationAirport, f.traj |=| ST_GeomFromText('POINT(:point)', 4326))
      FROM flights f
      WHERE f.traj |=| ST_GeomFromText('POINT(:point)', 4326)) <= distance;
    repetition: 2
    parameters:
      - point
      - distance

  # spatiotemporal queries
  - name: flightsInCountyInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT f.flightid, f.track, 
      FROM flights f 
      WHERE k.name = :county AND f.trip && stbox(k.geom, :period) AND eintersects(attime(f.trip, :period), k.geom);
    repetition: 2
    parameters:
      - period
      - county

  - name: pairOfFlightsInMunicipalityDuringPeriod
    use: False
    type: spatiotemporal
    sql: >
      SELECT DISTINCT f1.flightId AS f1_flightid, f2.flightid AS f2_flightid, :instant, g.name
      FROM flights f1, flights f2, municipality g
      WHERE f1.flightid < f2.flightid AND g.name = :municipality AND f1.trip && stbox(g.geom, :period) AND
      f2.Trip && stbox(g.geom, :period) AND
      eintersects(attime(f1.trip, :period), g.geom) AND
      eintersects(attime(f2.trip, :period), g.geom);
    repetition: 1000
    parameters:
      - period_short
      - municipality

  - name: countFlightsAtInstantInDistricts
    use: False
    type: spatiotemporal
    sql: >
      SELECT b.name, COUNT (*)
      FROM flights f, districts b
      WHERE eintersects(attime(f.trip, :instant), b.geom) AND b.name = :district;
    repetition: 2
    parameters:
      - instant

  - name: inCityRadiusInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT f.flightId, f.track, f.airplanetype, f.originAirport, f.destinationAirport, f.airplaneType
      FROM flights as f, cities as c
      WHERE c.name = city AND f.trip && tbox(f.trip, :period) AND ST_DWithin(attime(f.trip, :period), c.geom, :radius);
    repetition: 2
    parameters:
      - period
      - city
      - radius

  - name: flightDurationInMunicipalityLowAltitudeInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT g.name, f.flightid, f.originAirport, f.destinationAirport, f.airplaneType, sum(duration(whentrue(attime(f.altitude, :period) #< :low_altitude & tintersects(attime(f.trip, :period), g.geom)))) AS totalTimeBelowAltitude
      FROM flights f, municipalities g
      WHERE g.name = :municipality AND f.trip && stbox(g.geom, :period) AND eintersects(attime(f.trip, :period), g.geom);
    repetition: 2
    parameters:
      - period
      - municipality
      - low_altitude

  - name: averageHourlyFlightsDuringDayInCounty
    use: True
    type: spatiotemporal
    sql: >
      WITH hourly_intervals AS (
      SELECT generate_series(DATE :day::timestamp, (DATE :day + INTERVAL '1 day' - INTERVAL '1 second')::timestamp,
      INTERVAL '1 hour'
      ) AS start_time)
      SELECT h.start_time, COUNT(f.flightid) AS active_flights
      FROM hourly_intervals h LEFT JOIN flights f
      ON
      f.trip && span(h.start_time, h.start_time + INTERVAL '1 hour'), counties k
      WHERE eintersects(attime(f.trip, span(h.start_time, h.start_time + INTERVAL '1 hour')), k.geom) AND k.name = :county
      GROUP BY h.start_time
      ORDER BY h.start_time;
    repetition: 1000
    parameters:
      - day
      - county

  - name: flightsWithLocalOriginDestinationInPeriodInCounty
    use: True
    type: spatiotemporal
    sql: >
      SELECT
          f.flightid,
          f.origin AS origin_airport,
          CASE WHEN c1.name IS NOT NULL THEN c1.name ELSE 'abroad' END AS origin_city,
          f.destination AS destination_airport,
          CASE WHEN c2.name IS NOT NULL THEN c2.name ELSE 'abroad' END AS destination_city
      FROM flights f
              LEFT JOIN airports a1 ON f.origin = a1.icao
              LEFT JOIN cities c1 ON a1.city = c1.name
              LEFT JOIN airports a2 ON f.destination = a2.icao
              LEFT JOIN cities c2 ON a2.city = c2.name, counties k
      WHERE
          (f.origin IN (
              SELECT a.icao
              FROM airports a
                       JOIN cities c ON a.city = c.name) OR
           f.destination IN (
               SELECT a.icao
               FROM airports a JOIN cities c ON a.city = c.name))
      AND k.name = :county AND eintersects(attime(f.trip, :period), k.geom)
      ORDER BY origin_airport, destination_airport, f.flightid;
    repetition: 2
    parameters:
      - period
      - county













# temporal
  - name: locationOfLowFlyingAirplanesTypeAtInstant
    use: False
    type: temporal no aggregate query
    sql: >
      SELECT f.flightid, :instant as time, valueAtTimeStamp(f.altitude, :instant), ST_asText(valueAtTimeStamp(f.trip, :instant)) AS location
      FROM flights f
      WHERE valueattimestamp(f.trip, :instant) IS NOT NULL AND valueattimestamp(f.altitude, :instant) < 5000;
    repetition: 2
    parameters:
      - instant
      
  - name: flightTimeLowAltitude
    use: False
    type: temporal aggregation query
    sql: >
      SELECT
        f.flightid,
        duration(f.altitude) AS total_duration,
        duration(whentrue(f.altitude #< 4000)) AS duration_below_4000,
        CASE
            WHEN extract(EPOCH FROM duration((whentrue(f.altitude #< 4000)))) > 0 THEN
                extract(EPOCH FROM duration((whentrue(f.altitude #< 4000)))) /
                extract(EPOCH FROM duration(f.altitude))
        END AS low_altitude_ratio
      FROM flights f
      WHERE f.altitude && :period AND duration(whentrue(f.altitude #< 4000)) IS NOT NULL;
    repetition: 1000
    parameters:
      - period


  # takes to long to run in MongoDB
  - name: flightsOnlyInOneDistrict
    use: True
    type: spatial range query
    sql: >
      SELECT f.flightid, f.airplanetype, b.name
      FROM flights f, districts b
      WHERE aintersects(f.trip, b.geom) AND b.name = :district;
    repetition: 1000
    parameters:
      - district



# spatiotemporal
  - name: ClosePairOfPlanes (too long on Mongo)
    use: True
    type: spatiotemporal distance query (add constraint that f1.trip needs to be within period and inside a circle)
    sql: >
      SELECT f1.flightid, f2.flightid, f1.trip |=| f2.trip As MinDistance, f1.airplanetype, f2.airplanetype
      FROM flights f1, flights f2, counties k
      WHERE f1.trip |=| f2.trip < 10000 AND f1.flightid < f2.flightid AND
      ORDER BY MinDistance ASC;
    repetition: 1000
    parameters:
      - period

  - name: ClosestToCityDuringTime
    use: True
    type: spatial range-query
    sql: >
      SELECT f.flightId, f.airplanetype, c.name, nearestapproachdistance(f.trip, c.geom) As min_distance, gettime(nearestapproachinstant(f.trip, c.geom)) As min_distance_time
      FROM flights as f, cities as c
      WHERE nearestapproachdistance(f.trip, c.geom) < :radius AND nearestapproachinstant(f.trip, c.geom) <@ :period AND c.name = :city
      GROUP BY  f.flightId, c.name, f.airplanetype, f.trip, c.geom
      ORDER BY nearestapproachdistance(f.trip, c.geom) ASC;
    repetition: 1000
    parameters:
      - city
      - radius
      - period






