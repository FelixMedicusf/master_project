benchmark:
  sut: "MobilityDB"
  nodes:
    - "34.140.115.183"
    - "34.77.231.115"
    - "34.76.36.161"
  threads: 4
  random_seed: 123

queryConfigs:
  # Temporal queries (5 functioning, 3 chosen)

  # use
  - name: countActiveFlightsInPeriod
    use: True
    type: temporal
    sql: >
      SELECT COUNT(*), :period
      FROM flights f
      WHERE f.trip && :period;
    repetition: 15
    parameters:
      - period_long
      -
      # use
  - name: locationOfAirplaneAtInstant
    use: True
    type: temporal
    sql: >
      SELECT f.flightid, valueAtTimeStamp(f.altitude, :instant), ST_asText(valueAtTimeStamp(f.trip, :instant)) AS location, :instant
      FROM flights f
      WHERE attime(f.trip, :instant) IS NOT NULL;
    repetition: 15
    parameters:
      - instant

  # use
  - name: airportUtilizationInPeriod
    use: True
    type: temporal
    sql: >
      WITH departures AS (
      SELECT f.origin AS airport, COUNT(DISTINCT f.flightid) AS departure_count
      FROM flights f
      WHERE f.trip && :period_medium
      GROUP BY f.origin),
      arrivals AS (
      SELECT f.destination AS airport, COUNT(DISTINCT f.flightid) AS arrival_count
      FROM flights f
      WHERE f.trip && :period_medium
      GROUP BY f.destination)
      SELECT
      COALESCE(d.airport, a.airport) AS airport,
      COALESCE(d.departure_count, 0) AS departures,
      COALESCE(a.arrival_count, 0) AS arrivals,
      COALESCE(d.departure_count, 0) + COALESCE(a.arrival_count, 0) AS traffic_count
      FROM departures d FULL JOIN arrivals a ON d.airport = a.airport
      ORDER BY traffic_count DESC, departures DESC, arrivals DESC;
    repetition: 15
    parameters:
      - period_medium

  # Spatial queries (5 functioning, 3 chosen)

  # use
  - name: countFlightsInCounties
    use: True
    type: spatial
    sql: >
      SELECT k.name, COUNT(*) as flight_count
      FROM counties k
      JOIN flights f
      ON f.traj && k.geom
      WHERE k.name = :county AND st_intersects(f.traj, k.geom)
      GROUP BY k.name;
    repetition: 15
    parameters:
      - county
  # use
  - name: flightsCloseToMainCitiesLowAltitude
    use: True
    type: spatial
    sql: >
      SELECT p.flightid, p.altitude, p.airplanetype, p.timestamp
      FROM flightpoints p
      JOIN cities c
      ON ST_DWithin(p.geom, c.geom, :radius)  
      WHERE p.altitude <= :low_altitude
      AND c.population >= 200000;
    repetition: 15
    parameters:
      - low_altitude
      - radius

  # use
  - name: flightClosestToPoint
    use: True
    type: spatial
    sql: >
      SELECT f.flightid, f.airplaneType, f.origin, f.destination,
      ST_Distance(f.traj, ST_GeogFromText('SRID=4326;:point')) AS min_distance
      FROM flights f
      WHERE ST_DWithin(f.traj, ST_GeogFromText('SRID=4326;:point'), 115)  
      ORDER BY min_distance ASC;
    parameters:
      - point
      - distance


  # spatiotemporal queries (6 (7) functioning, 6 chosen)
  # use
  - name: flightsInCountyInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT f.flightid, f.track
      FROM flights f, counties k
      WHERE k.name = :county AND f.trip && stbox(k.geom, :period_medium) AND eintersects(attime(f.trip, :period_medium), k.geom);
    repetition: 15
    parameters:
      - period_short
      - county

  #use
  - name: countFlightsAtInstantInDistricts
    use: True
    type: spatiotemporal
    sql: >
      SELECT b.name, COUNT (*)
      FROM flights f, districts b
      WHERE f.trip && stbox(b.geom, :instant) AND eintersects(attime(f.trip, :instant), b.geom)
      GROUP BY b.name;
    repetition: 15
    parameters:
      - instant

  # use
  - name: inCityRadiusInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT f.flightId, f.track, f.airplanetype, f.origin, f.destination
      FROM cities AS c
      JOIN flights AS f
      ON eDwithin(attime(f.trip, :period_short), c.geom, :radius)
      WHERE c.name = :city AND f.trip && :period_short;
    repetition: 15
    parameters:
      - period_medium
      - city
      - radius

  # use
  - name: flightDurationInMunicipalityLowAltitudeInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT g.name, f.flightid, f.origin, f.destination, f.airplanetype,
      duration(whenTrue(attime(f.altitude, :period_medium) #< :low_altitude
      & tintersects(attime(tgeompoint(f.trip), :period_medium), geometry(g.geom))))
      AS totalTimeBelowAltitude
      FROM municipalities g
      JOIN flights f
      ON f.trip && stbox(g.geom, :period_medium)
      WHERE g.name = :municipality AND duration(whenTrue(attime(f.altitude, :period_medium) #< :low_altitude
      & tintersects(attime(tgeompoint(f.trip), :period_medium), geometry(g.geom)))) IS NOT NULL;
    repetition: 15
    parameters:
      - period_short
      - municipality
      - low_altitude

  - name: flightsInMunicipalityLowAltitudeInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT g.name, f.flightid, f.origin, f.destination, f.airplanetype, whenTrue(attime(f.altitude, :period_medium) #< :low_altitude
      & tintersects(attime(tgeompoint(f.trip), :period_medium), geometry(g.geom))) as whenTrue
      FROM municipalities g
      JOIN flights f
      ON f.trip && stbox(g.geom, :period_medium)
      WHERE g.name = :municipality AND whenTrue(attime(f.altitude, :period_medium) #< :low_altitude
      & tintersects(attime(tgeompoint(f.trip), :period_medium), geometry(g.geom))) IS NOT NULL;
    repetition: 15
    parameters:
      - period_short
      - municipality
      - low_altitude

  # use
  - name: averageHourlyFlightsDuringDayInMunicipality
    use: True
    type: spatiotemporal
    sql: >
      WITH hourly_flights AS (
      SELECT generate_series(
      DATE :day::timestamp,
      DATE :day + INTERVAL '1 day' - INTERVAL '1 second',
      INTERVAL '1 hour'
      ) AS start_time
      ),
      filtered_flights AS (
      SELECT f.flightid, g.name AS municipality_name, g.geom as polygon,
      attime(f.trip, span(:day::timestamp, :day::timestamp + INTERVAL '1 day')) AS daily_trip
      FROM flights f
      JOIN municipalities g ON f.trip && stbox(g.geom, span(:day::timestamp, :day::timestamp + INTERVAL '1 day'))
      WHERE g.name = :municipality
      )
      SELECT h.start_time, COUNT(f.flightid) AS active_flights
      FROM hourly_flights h
      LEFT JOIN filtered_flights f
      ON eintersects(attime(f.daily_trip, span(h.start_time, h.start_time + INTERVAL '1 hour' - INTERVAL '1 second')), polygon)
      WHERE f.municipality_name = :municipality
      GROUP BY h.start_time
      ORDER BY h.start_time;
    repetition: 15
    parameters:
      - day
      - municipality

  # use
  - name: flightsWithLocalOriginDestinationInPeriodInCounty
    use: True
    type: spatiotemporal
    sql: >
      WITH relevant_airports AS (
      SELECT a.icao as icao
      FROM airports a
      JOIN cities c ON a.city = c.name
      ),
      airport_city_mapping AS (
      SELECT a.icao, COALESCE(c.name, 'abroad') AS city_name
      FROM airports a
      LEFT JOIN cities c ON a.city = c.name
      )
      SELECT f.flightid, f.origin AS origin_airport, acm1.city_name AS origin_city, f.destination AS destination_airport,
      acm2.city_name AS destination_city
      FROM flights f
      JOIN counties k ON k.name = :county
      LEFT JOIN airport_city_mapping acm1 ON f.origin = acm1.icao
      LEFT JOIN airport_city_mapping acm2 ON f.destination = acm2.icao
      WHERE
      (f.origin IN (SELECT icao FROM relevant_airports) OR f.destination IN (SELECT icao FROM relevant_airports))
      AND f.trip && stbox(k.geom, :period_medium)
      AND eintersects(attime(f.trip, :period_medium), k.geom)
      ORDER BY origin_airport, destination_airport, f.flightid;
    repetition: 15
    parameters:
      - period_medium
      - county









  # join query
  - name: pairOfFlightsInMunicipalityDuringPeriod
    use: False
    type: spatiotemporal
    sql: >
      SELECT DISTINCT f1.flightId AS f1_flightid, f2.flightid AS f2_flightid, :period, g.name
      FROM flights f1, flights f2, municipality g
      WHERE f1.flightid < f2.flightid AND g.name = :municipality AND f1.trip && stbox(g.geom, :period) AND
      f2.trip && stbox(g.geom, :period) AND
      eintersects(attime(f1.trip, :period), g.geom) AND
      eintersects(attime(f2.trip, :period), g.geom);
    repetition: 1000
    parameter_sets:
      - parameters:
          period_short: tstzspan'[2023-09-10 19:51:12, 2023-09-11 19:55:56]'
          municipality: "'Gem Augustdorf'"
      - parameters:
          period_short: tstzspan'[2023-08-15 17:52:01, 2023-08-16 08:58:06]'
          municipality: "'Gem Sonsbeck'"
      - parameters:
          period_short: tstzspan'[2023-05-13 01:26:19, 2023-05-14 13:11:58]'
          municipality: "'Gem Dahlem'"
      - parameters:
          period_short: tstzspan'[2023-06-28 05:50:01, 2023-06-28 17:44:05]'
          municipality: "'Gem Meerbusch'"
      - parameters:
          period_short: tstzspan'[2023-10-09 03:32:04, 2023-10-09 19:47:49]'
          municipality: "'Gem Langenberg'"














  - name: averageHourlyFlightsDuringDay
    use: False
    type: temporal
    sql: >
      WITH hourly_intervals AS (
      SELECT generate_series(DATE :day::timestamp, (DATE :day + INTERVAL '1 day' - INTERVAL '1 second')::timestamp,
      INTERVAL '1 hour'
      ) AS start_time)
      SELECT h.start_time, COUNT(f.flightid) AS active_flights
      FROM hourly_intervals h LEFT JOIN flights f
      ON
      f.trip && span(h.start_time, h.start_time + INTERVAL '1 hour')
      GROUP BY h.start_time
      ORDER BY h.start_time;
    repetition: 15
    parameters:
      - period_medium